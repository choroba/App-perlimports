exclude = [
    # Used by Dist::Zilla
    ".build",
    "App-perlimports-*",
    "blib",
    "inc",
    "test-data",
    # All of these are generated by Dist::Zilla
    "t/00-*",
    "t/author-*",
    "t/release-*",
    "xt/author",
    "xt/release",
]

[commands.omegasort-gitignore]
type = "both"
include = "**/.gitignore"
cmd = [ "omegasort", "--sort=path" ]
lint_flags = "--check"
tidy_flags = "--in-place"
ok_exit_codes = 0
lint_failure_exit_codes = 1
expect_stderr = true

# If you have an external stopwords file for use with Test::Spelling
[commands.omegasort-stopwords]
type = "both"
include = ".stopwords"
cmd = [ "omegasort", "--sort=text", "--case-insensitive" ]
lint_flags = "--check"
tidy_flags = "--in-place"
ok_exit_codes = 0
lint_failure_exit_codes = 1
expect_stderr = true

# Add Perl::Tidy as a develop phase prereq
#[commands.perltidy]
#type = "both"
#include = [ "**/*.{pl,pm,t,psgi}" ]
#cmd = [ "perltidy", "--profile=$PRECIOUS_ROOT/perltidyrc" ]
#lint_flags = [ "--assert-tidy", "--no-standard-output", "--outfile=/dev/null" ]
#tidy_flags = [ "--backup-and-modify-in-place", "--backup-file-extension=/" ]
#ok_exit_codes = 0
#lint_failure_exit_codes = 2
#expect_stderr = true

[commands.perlimports]
type = "tidy"
include = [ "**/*.{pl,pm,t,psgi}" ]
cmd = [ "perl", "-Ilib", "script/perlimports" ]
tidy_flags = [
    "--libs", "lib,t/lib",
    "--log-filename", "/tmp/perlimports.txt",
    "--log-level", "debug",
    "--no-preserve-duplicates",
    "--no-preserve-unused",
    "-f",
]
ok_exit_codes = 0
expect_stderr = true
